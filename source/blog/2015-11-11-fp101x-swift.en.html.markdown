---
title: "[FP101x] Credit card validation with Swift (Lab2)"
date: 2015-11-11 13:28 UTC
tags: functional programming, swift, haskell
---

I am currently taking [TUDelft's "FP101x - Intro to Functional Programming"](https://www.edx.org/course/introduction-functional-programming-delftx-fp101x-0) class at edX, and I am enjoying it so far.READMORE

The reason why this post exists is to share my FP101x exercises that I did written in Swift. The instructor of the class, [Erik Meijer](https://twitter.com/headinthebox), even said this a while back:

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">At this point, <a href="https://twitter.com/SwiftLang">@SwiftLang</a> is probably a better, and more valuable, vehicle for learning functional programming than Haskell.</p>&mdash; Erik Meijer (@headinthebox) <a href="https://twitter.com/headinthebox/status/655407294969196544">October 17, 2015</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

Since I could not found any swift code found in the FP101x class, I ported the haskell files to Swift playgrounds.

### ðŸ’³ validation - Lab2.swift

Below is the snippet of the lab2.hs exercise written in Swift

```swift

// Helpers
func eval(digits: [Int]) -> Int {
    return digits.reduce(0, combine: { initValue, digit in
        digit + (initValue * 10)
    })
}

func evalRev(digits: [Int]) -> Int {
    // using reversed iterator because there's no foldr in swift
    var result = 0
    for index in (digits.count-1).stride(through: 0, by: -1) {
        result = (result * 10) + digits[index]
    }
    return result
}

// Ex. 0
func toDigits(digit: Int) -> [Int] {
    return []
}

// Ex. 1
func toDigitsRev(digit: Int) -> [Int] {
    return []
}

// Ex. 2
func doubleSecond(digits: [Int]) -> [Int] {
    return []
}

// Ex. 3
func sumDigits(digits: [Int]) -> Int {
    return 0
}

// Ex. 4
func isValid(digit: Int) -> Bool {
    return false
}
```

For the complete version of this exercise, you can download the full playground file : [Lab2.playground](2015-11-11-fp101x-swift/lab2.playground.zip). It is properly formatted with markdown and stuff, it is pretty neat!

![playground](blog/2015-11-11-fp101x-swift/playground.png "Playground in Xcode")

### Haskell version

If you are interested to check the original exercise in haskell, you can see it [here](2015-11-11-fp101x-swift/lab2.hs).

## Solution

The plan is to port all the FP101x's exercises from haskell to swift playgrounds and make follow-ups once the deadlines are passed. So please come back after the deadlines to discuss and compare our solutions.

As Erik himself always said in his class, happy hacking! ðŸ¤“
