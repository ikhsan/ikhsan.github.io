---
title: "[FP101x] Validasi kartu kredit dengan Swift (Lab2)"
date: 2015-11-11 13:28 UTC
tags: functional programming, swift, haskell
---

Sekarang saya sedang mengambil kelas online [TUDelft's "FP101x - Intro to Functional Programming"](https://www.edx.org/course/introduction-functional-programming-delftx-fp101x-0) di edX, dan ternyata seru juga. Postingan ini ditulis karena saya ingin berbagi solusi dari latihan-latihan dari kelas FP101x yang saya kerjakan ulang dengan Swift. READMORE Bahkan sang pengajar kelas tersebut, [Erik Meijer](https://twitter.com/headinthebox), beberapa waktu lalu nge-tweet seperti ini :

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">At this point, <a href="https://twitter.com/SwiftLang">@SwiftLang</a> is probably a better, and more valuable, vehicle for learning functional programming than Haskell.</p>&mdash; Erik Meijer (@headinthebox) <a href="https://twitter.com/headinthebox/status/655407294969196544">October 17, 2015</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

Tapi karena sampai sekarang saya belum menemukan kode Swift di kelas FP101x, jadi saya tulis ulang kode haskell dari kelas FP101x ke Swift playground.

### Validasi ðŸ’³ - Lab2.swift

Berikut kutipan dari latihan lab2.hs yang saya tulis kembali dengan Swift

```swift

// Helpers
func eval(digits: [Int]) -> Int {
    return digits.reduce(0, combine: { initValue, digit in
        digit + (initValue * 10)
    })
}

func evalRev(digits: [Int]) -> Int {
    // menggunakan reversed iterator karena tidak ada foldr di swift
    var result = 0
    for index in (digits.count-1).stride(through: 0, by: -1) {
        result = (result * 10) + digits[index]
    }
    return result
}

extension SequenceType {
    public func all(@noescape validateElement: (Self.Generator.Element) -> Bool) -> Bool {
        return self.reduce(true) { initial, element in
            return initial && validateElement(element)
        }
    }
}

// Ex. 0
func toDigits(digit: Int) -> [Int] { return [] }

// Ex. 1
func toDigitsRev(digit: Int) -> [Int] { return [] }

// Ex. 2
func doubleSecond(digits: [Int]) -> [Int] { return [] }

// Ex. 3
func sumDigits(digits: [Int]) -> Int { return 0 }

// Ex. 4
func isValid(digit: Int) -> Bool { return false }

// Ex. 5
func numValid(digits: [Int]) -> Int {
    return digits.filter(isValid).count
}
```

Versi lengkapnya latihan ini bisa diunduh sebagai playground : [Lab2.playground](2015-11-11-fp101x-swift/lab2.playground.zip). Playground-nya sudah diformat sedemikian rupa dengan markdown, jadi lebih rapi aja gitu. Playground dibuat dengan Xcode 7.1 dan Swift 2.0.

![playground](blog/2015-11-11-fp101x-swift/playground.png "Playground in Xcode")

### Versi haskell

Kalau tertarik untuk mengecek latihan aslinya dalam haskell, bisa dilihat di [sini](2015-11-11-fp101x-swift/lab2.hs).

## Solusi

Rencananya adalah menulis ulang semua latihan dari FP101x menjadi Swift playground dan setiap melewati _deadline_ akan saya posting solusinya. Jadi nanti balik lagi ya setelah _deadline_-nya lewat untuk berdiskusi dan membandingkan solusi-solusi yang kita temui.

Seperti yang selalu dikatakan Erik di kelasnya, happy hacking! ðŸ¤“
